/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { NodeObject } from "jsonld";
import { SelectEvent } from "./utils/events";
export { NodeObject } from "jsonld";
export { SelectEvent } from "./utils/events";
export namespace Components {
    interface IncldeEditor {
        "config": object | string;
        "data": object | string;
    }
    interface IncldeHelpSpot {
        "helpText": string;
    }
    interface IncldeInput {
        "data": NodeObject[];
        "isEditable": boolean;
        "selector": (string|number)[];
    }
    interface IncldeSidebar {
        "data": NodeObject[];
        "selectedIndex"?: number;
    }
    interface IncldeSidebarElement {
        "data": NodeObject[];
        "globalSelector"?: number;
        "selector"?: number;
    }
    /**
     * This component represents the properties of a selected entity.
     */
    interface IncldeView {
        "data": NodeObject[];
        /**
          * The index of the object to render.
         */
        "selectedIndex"?: number;
    }
    interface IncldeViewEdit {
        "data": NodeObject[];
        "selectedIndex": number;
        "subElement"?: string;
    }
    interface IncldeViewLink {
        "data": NodeObject[];
        "label": string;
        "selector"?: number;
    }
}
export interface IncldeEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIncldeEditorElement;
}
export interface IncldeInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIncldeInputElement;
}
export interface IncldeSidebarElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIncldeSidebarElementElement;
}
export interface IncldeViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIncldeViewElement;
}
export interface IncldeViewEditCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIncldeViewEditElement;
}
export interface IncldeViewLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLIncldeViewLinkElement;
}
declare global {
    interface HTMLIncldeEditorElement extends Components.IncldeEditor, HTMLStencilElement {
    }
    var HTMLIncldeEditorElement: {
        prototype: HTMLIncldeEditorElement;
        new (): HTMLIncldeEditorElement;
    };
    interface HTMLIncldeHelpSpotElement extends Components.IncldeHelpSpot, HTMLStencilElement {
    }
    var HTMLIncldeHelpSpotElement: {
        prototype: HTMLIncldeHelpSpotElement;
        new (): HTMLIncldeHelpSpotElement;
    };
    interface HTMLIncldeInputElement extends Components.IncldeInput, HTMLStencilElement {
    }
    var HTMLIncldeInputElement: {
        prototype: HTMLIncldeInputElement;
        new (): HTMLIncldeInputElement;
    };
    interface HTMLIncldeSidebarElement extends Components.IncldeSidebar, HTMLStencilElement {
    }
    var HTMLIncldeSidebarElement: {
        prototype: HTMLIncldeSidebarElement;
        new (): HTMLIncldeSidebarElement;
    };
    interface HTMLIncldeSidebarElementElement extends Components.IncldeSidebarElement, HTMLStencilElement {
    }
    var HTMLIncldeSidebarElementElement: {
        prototype: HTMLIncldeSidebarElementElement;
        new (): HTMLIncldeSidebarElementElement;
    };
    /**
     * This component represents the properties of a selected entity.
     */
    interface HTMLIncldeViewElement extends Components.IncldeView, HTMLStencilElement {
    }
    var HTMLIncldeViewElement: {
        prototype: HTMLIncldeViewElement;
        new (): HTMLIncldeViewElement;
    };
    interface HTMLIncldeViewEditElement extends Components.IncldeViewEdit, HTMLStencilElement {
    }
    var HTMLIncldeViewEditElement: {
        prototype: HTMLIncldeViewEditElement;
        new (): HTMLIncldeViewEditElement;
    };
    interface HTMLIncldeViewLinkElement extends Components.IncldeViewLink, HTMLStencilElement {
    }
    var HTMLIncldeViewLinkElement: {
        prototype: HTMLIncldeViewLinkElement;
        new (): HTMLIncldeViewLinkElement;
    };
    interface HTMLElementTagNameMap {
        "inclde-editor": HTMLIncldeEditorElement;
        "inclde-help-spot": HTMLIncldeHelpSpotElement;
        "inclde-input": HTMLIncldeInputElement;
        "inclde-sidebar": HTMLIncldeSidebarElement;
        "inclde-sidebar-element": HTMLIncldeSidebarElementElement;
        "inclde-view": HTMLIncldeViewElement;
        "inclde-view-edit": HTMLIncldeViewEditElement;
        "inclde-view-link": HTMLIncldeViewLinkElement;
    }
}
declare namespace LocalJSX {
    interface IncldeEditor {
        "config": object | string;
        "data": object | string;
        /**
          * Fired when the data is updated. Can be used to peek into the data from outside the editor. Not yet reliably fired. Returns the same information as the `editorClosed` event.
         */
        "onDataUpdated"?: (event: IncldeEditorCustomEvent<NodeObject | NodeObject[] | string>) => void;
        /**
          * Fired when the editor is closed with the save or cancel buttons. `event.detail` contains the edited data if the save button was clicked, undefined otherwise.
         */
        "onEditorClosed"?: (event: IncldeEditorCustomEvent<NodeObject | NodeObject[] | undefined>) => void;
    }
    interface IncldeHelpSpot {
        "helpText"?: string;
    }
    interface IncldeInput {
        "data"?: NodeObject[];
        "isEditable"?: boolean;
        "onElementSelected"?: (event: IncldeInputCustomEvent<SelectEvent>) => void;
        "selector"?: (string|number)[];
    }
    interface IncldeSidebar {
        "data": NodeObject[];
        "selectedIndex"?: number;
    }
    interface IncldeSidebarElement {
        "data": NodeObject[];
        "globalSelector"?: number;
        "onElementSelected"?: (event: IncldeSidebarElementCustomEvent<SelectEvent>) => void;
        "selector"?: number;
    }
    /**
     * This component represents the properties of a selected entity.
     */
    interface IncldeView {
        "data": NodeObject[];
        "onRedraw"?: (event: IncldeViewCustomEvent<CustomEvent>) => void;
        /**
          * The index of the object to render.
         */
        "selectedIndex"?: number;
    }
    interface IncldeViewEdit {
        "data": NodeObject[];
        "onRedraw"?: (event: IncldeViewEditCustomEvent<CustomEvent>) => void;
        "selectedIndex": number;
        "subElement"?: string;
    }
    interface IncldeViewLink {
        "data"?: NodeObject[];
        "label"?: string;
        "onElementSelected"?: (event: IncldeViewLinkCustomEvent<SelectEvent>) => void;
        "selector"?: number;
    }
    interface IntrinsicElements {
        "inclde-editor": IncldeEditor;
        "inclde-help-spot": IncldeHelpSpot;
        "inclde-input": IncldeInput;
        "inclde-sidebar": IncldeSidebar;
        "inclde-sidebar-element": IncldeSidebarElement;
        "inclde-view": IncldeView;
        "inclde-view-edit": IncldeViewEdit;
        "inclde-view-link": IncldeViewLink;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "inclde-editor": LocalJSX.IncldeEditor & JSXBase.HTMLAttributes<HTMLIncldeEditorElement>;
            "inclde-help-spot": LocalJSX.IncldeHelpSpot & JSXBase.HTMLAttributes<HTMLIncldeHelpSpotElement>;
            "inclde-input": LocalJSX.IncldeInput & JSXBase.HTMLAttributes<HTMLIncldeInputElement>;
            "inclde-sidebar": LocalJSX.IncldeSidebar & JSXBase.HTMLAttributes<HTMLIncldeSidebarElement>;
            "inclde-sidebar-element": LocalJSX.IncldeSidebarElement & JSXBase.HTMLAttributes<HTMLIncldeSidebarElementElement>;
            /**
             * This component represents the properties of a selected entity.
             */
            "inclde-view": LocalJSX.IncldeView & JSXBase.HTMLAttributes<HTMLIncldeViewElement>;
            "inclde-view-edit": LocalJSX.IncldeViewEdit & JSXBase.HTMLAttributes<HTMLIncldeViewEditElement>;
            "inclde-view-link": LocalJSX.IncldeViewLink & JSXBase.HTMLAttributes<HTMLIncldeViewLinkElement>;
        }
    }
}
